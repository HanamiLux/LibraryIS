// <auto-generated />
using System;
using LibraryWebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryWebApi.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20240508010000_LogsFKNullable")]
    partial class LogsFKNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryWebApi.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("country");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastname");

                    b.HasKey("Id")
                        .HasName("authors_pkey");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Bestbook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Bookid")
                        .HasColumnType("integer")
                        .HasColumnName("bookid");

                    b.Property<int>("Ranking")
                        .HasColumnType("integer")
                        .HasColumnName("ranking");

                    b.Property<short>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("bestbooks_pkey");

                    b.HasIndex("Bookid");

                    b.ToTable("bestbooks");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Authorid")
                        .HasColumnType("integer")
                        .HasColumnName("authorid");

                    b.Property<int>("Availablecopies")
                        .HasColumnType("integer")
                        .HasColumnName("availablecopies");

                    b.Property<int>("Genreid")
                        .HasColumnType("integer")
                        .HasColumnName("genreid");

                    b.Property<bool?>("Isavailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isavailable");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("isbn");

                    b.Property<int>("Publisherid")
                        .HasColumnType("integer")
                        .HasColumnName("publisherid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<short>("Yearpublished")
                        .HasColumnType("smallint")
                        .HasColumnName("yearpublished");

                    b.HasKey("Id")
                        .HasName("books_pkey");

                    b.HasIndex("Authorid");

                    b.HasIndex("Genreid");

                    b.HasIndex("Publisherid");

                    b.ToTable("books");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Bookinstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Acquireddate")
                        .HasColumnType("date")
                        .HasColumnName("acquireddate");

                    b.Property<int>("Bookid")
                        .HasColumnType("integer")
                        .HasColumnName("bookid");

                    b.Property<int>("Conditionid")
                        .HasColumnType("integer")
                        .HasColumnName("conditionid");

                    b.Property<bool?>("Isavailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isavailable");

                    b.HasKey("Id")
                        .HasName("bookinstances_pkey");

                    b.HasIndex("Bookid");

                    b.HasIndex("Conditionid");

                    b.ToTable("bookinstances");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Bookrental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Daterented")
                        .HasColumnType("date")
                        .HasColumnName("daterented");

                    b.Property<DateOnly>("Datereturned")
                        .HasColumnType("date")
                        .HasColumnName("datereturned");

                    b.Property<int>("Instanceid")
                        .HasColumnType("integer")
                        .HasColumnName("instanceid");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("bookrentals_pkey");

                    b.HasIndex("Instanceid");

                    b.HasIndex("Userid");

                    b.ToTable("bookrentals");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Bookreview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Bookid")
                        .HasColumnType("integer")
                        .HasColumnName("bookid");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint")
                        .HasColumnName("rate");

                    b.Property<string>("Reviewcontent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reviewcontent");

                    b.Property<DateTime?>("Reviewdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reviewdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("bookreviews_pkey");

                    b.HasIndex("Bookid");

                    b.HasIndex("Userid");

                    b.ToTable("bookreviews");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("conditions_pkey");

                    b.ToTable("conditions");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Genrename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("genrename");

                    b.HasKey("Id")
                        .HasName("genres_pkey");

                    b.ToTable("genres");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Logdatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("logdatetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Useraction")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("useraction");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("logs_pkey");

                    b.HasIndex("Userid");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Contactphone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contactphone");

                    b.Property<string>("Publishername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("publishername");

                    b.HasKey("Id")
                        .HasName("publishers_pkey");

                    b.ToTable("publishers");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Rolename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("rolename");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("LibraryWebApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Isavailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isavailable");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<int>("Roleid")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("Roleid");

                    b.ToTable("users");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Bestbook", b =>
                {
                    b.HasOne("LibraryWebApi.Models.Book", "Book")
                        .WithMany("Bestbooks")
                        .HasForeignKey("Bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bestbooks_bookid_fkey");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Book", b =>
                {
                    b.HasOne("LibraryWebApi.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("Authorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("books_authorid_fkey");

                    b.HasOne("LibraryWebApi.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("Genreid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("books_genreid_fkey");

                    b.HasOne("LibraryWebApi.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("Publisherid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("books_publisherid_fkey");

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Bookinstance", b =>
                {
                    b.HasOne("LibraryWebApi.Models.Book", "Book")
                        .WithMany("Bookinstances")
                        .HasForeignKey("Bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookinstances_bookid_fkey");

                    b.HasOne("LibraryWebApi.Models.Condition", "Condition")
                        .WithMany("Bookinstances")
                        .HasForeignKey("Conditionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookinstances_conditionid_fkey");

                    b.Navigation("Book");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Bookrental", b =>
                {
                    b.HasOne("LibraryWebApi.Models.Bookinstance", "Instance")
                        .WithMany("Bookrentals")
                        .HasForeignKey("Instanceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookrentals_instanceid_fkey");

                    b.HasOne("LibraryWebApi.Models.User", "User")
                        .WithMany("Bookrentals")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookrentals_userid_fkey");

                    b.Navigation("Instance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Bookreview", b =>
                {
                    b.HasOne("LibraryWebApi.Models.Book", "Book")
                        .WithMany("Bookreviews")
                        .HasForeignKey("Bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookreviews_bookid_fkey");

                    b.HasOne("LibraryWebApi.Models.User", "User")
                        .WithMany("Bookreviews")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookreviews_userid_fkey");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Log", b =>
                {
                    b.HasOne("LibraryWebApi.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("logs_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryWebApi.Models.User", b =>
                {
                    b.HasOne("LibraryWebApi.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("users_roleid_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Book", b =>
                {
                    b.Navigation("Bestbooks");

                    b.Navigation("Bookinstances");

                    b.Navigation("Bookreviews");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Bookinstance", b =>
                {
                    b.Navigation("Bookrentals");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Condition", b =>
                {
                    b.Navigation("Bookinstances");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryWebApi.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryWebApi.Models.User", b =>
                {
                    b.Navigation("Bookrentals");

                    b.Navigation("Bookreviews");

                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
